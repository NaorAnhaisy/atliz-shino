{"version":3,"sources":["components/MainNavbar/MainNavbar.jsx","MeatStore.js","components/SimpleSlider/SimpleSlider.jsx","App.js","serviceWorker.js","index.js"],"names":["MainNavbar","Navbar","sticky","bg","variant","Brand","href","Nav","className","Link","Form","inline","FormControl","type","placeholder","Button","Component","getMeats","meats","push","name","price","imageUrl","SimpleSlider","handleSlideClick","meat","console","log","createSlides","slides","forEach","onClick","src","alt","settings","dots","infinite","speed","slidesToShow","slidesToScroll","this","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wXA4BeA,E,uKApBX,OACE,kBAACC,EAAA,EAAD,CAAQC,OAAO,MAAMC,GAAG,OAAOC,QAAQ,QACrC,kBAACH,EAAA,EAAOI,MAAR,CAAcC,KAAK,SAAnB,uKACA,kBAACC,EAAA,EAAD,CAAKC,UAAU,gBACb,kBAACD,EAAA,EAAIE,KAAL,CAAUH,KAAK,UAAf,+CACA,kBAACC,EAAA,EAAIE,KAAL,CAAUH,KAAK,UAAf,kCAGA,kBAACC,EAAA,EAAIE,KAAL,CAAUH,KAAK,aAAf,sBACA,kBAACC,EAAA,EAAIE,KAAL,CAAUH,KAAK,aAAf,0CAEF,kBAACI,EAAA,EAAD,CAAMC,QAAM,GACV,kBAACC,EAAA,EAAD,CAAaC,KAAK,OAAOC,YAAY,mEACrC,kBAACC,EAAA,EAAD,CAAQX,QAAQ,eAAeI,UAAU,WAAzC,6B,GAhBeQ,a,qCCLlB,SAASC,IACZ,IAAIC,EAAQ,GA8BZ,OA5BAA,EAAMC,KACF,CACIC,KAAM,mDACNC,MAAO,IACPC,SAAU,yGAEd,CACIF,KAAM,6CACNC,MAAO,IACPC,SAAU,gEAEd,CACIF,KAAM,iCACNC,MAAO,GACPC,SAAU,yGAEd,CACIF,KAAM,8CACNC,MAAO,GACPC,SAAU,wLAEd,CACIF,KAAM,qBACNC,MAAO,IACPC,SAAU,8FAIXJ,E,ICxBUK,E,4MAEnBC,iBAAmB,SAACC,GAClBC,QAAQC,IAAIF,I,EAGdG,aAAe,WACb,IAAIC,EAAS,GAWb,OAVYZ,IAENa,SAAQ,SAAAL,GACZI,EAAOV,KACL,yBAAKX,UAAU,YACb,yBAAKA,UAAU,aAAauB,QAAS,kBAAM,EAAKP,iBAAiBC,IAAOO,IAAKP,EAAKH,SAAUW,IAAI,SAChG,4BAAKR,EAAKL,WAITS,G,uDAIP,IAAMK,EAAW,CACfC,MAAM,EACNC,UAAU,EACVC,MAAO,IACPC,aAAc,EACdC,eAAgB,GAGlB,OACE,yBAAK/B,UAAU,aACb,wBAAIA,UAAU,eAAd,4DACA,6BACA,kBAAC,IAAW0B,EACTM,KAAKZ,qB,GAnC0BZ,aCW3ByB,MAZf,WAEE,OACE,yBAAKjC,UAAU,OACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,qBACb,kBAAC,EAAD,SCAYkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.cd90a7bc.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './MainNavbar.css';\r\nimport { Navbar, Nav, Form, FormControl, Button } from 'react-bootstrap';\r\n// import { DropdownButton, Dropdown } from 'react-bootstrap';\r\n\r\nclass MainNavbar extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <Navbar sticky=\"top\" bg=\"dark\" variant=\"dark\">\r\n        <Navbar.Brand href=\"#home\">אטליז שינו ובניו - מרכז הבשר החלק</Navbar.Brand>\r\n        <Nav className=\"mr-auto-left\">\r\n          <Nav.Link href=\"#about\">מי אנחנו</Nav.Link>\r\n          <Nav.Link href=\"#meats\">\r\n            בשרים\r\n          </Nav.Link>\r\n          <Nav.Link href=\"#features\">אחר</Nav.Link>\r\n          <Nav.Link href=\"#features\">צור קשר</Nav.Link>\r\n        </Nav>\r\n        <Form inline>\r\n          <FormControl type=\"text\" placeholder=\"הכנס שם מוצר\" />\r\n          <Button variant=\"outline-info\" className=\"mr-sm-2\">חפש!</Button>\r\n        </Form>\r\n      </Navbar>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MainNavbar;","export function getMeats() {\r\n    let meats = [];\r\n\r\n    meats.push(\r\n        {\r\n            name: \"אנטריקוט\",\r\n            price: 160,\r\n            imageUrl: \"https://d3m9l0v76dty0.cloudfront.net/system/photos/4228157/large/2ef8410d6937ae8b396bfb75d8741fd3.jpg\"\r\n        },\r\n        {\r\n            name: \"פיקאניה\",\r\n            price: 120,\r\n            imageUrl: \"https://www.ynet.co.il/PicServer2/13062011/3308701/16_wa.jpg\"\r\n        },\r\n        {\r\n            name: \"אסאדו\",\r\n            price: 90,\r\n            imageUrl: \"https://d3m9l0v76dty0.cloudfront.net/system/photos/3433484/large/d8f405aa8a27a5a54047b02d0729164a.jpg\"\r\n        },\r\n        {\r\n            name: \"בשר טחון\",\r\n            price: 55,\r\n            imageUrl: \"https://www.easyrecipes.co.il/wp-content/uploads/2015/01/%D7%91%D7%A9%D7%A8-%D7%91%D7%A7%D7%A8-%D7%98%D7%97%D7%95%D7%9F-%D7%9C%D7%94%D7%9E%D7%91%D7%95%D7%A8%D7%92%D7%A8-660x437.jpg\"\r\n        },\r\n        {\r\n            name: \"זנב\",\r\n            price: 120,\r\n            imageUrl: \"https://dubkin.co.il/wp-content/uploads/2019/04/%D7%96%D7%A0%D7%91-%D7%A2%D7%92%D7%9C.jpg\"\r\n        }\r\n    )\r\n\r\n    return meats\r\n}","import React, { Component } from 'react';\r\nimport './SimpleSlider.css';\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\nimport Slider from \"react-slick\";\r\nimport { getMeats } from '../../MeatStore.js'\r\n\r\nexport default class SimpleSlider extends Component {\r\n\r\n  handleSlideClick = (meat) => {\r\n    console.log(meat)\r\n  }\r\n\r\n  createSlides = () => {\r\n    let slides = [];\r\n    let meats = getMeats();\r\n\r\n    meats.forEach(meat => {\r\n      slides.push(\r\n        <div className=\"item-div\">\r\n          <img className=\"item-image\" onClick={() => this.handleSlideClick(meat)} src={meat.imageUrl} alt=\"meat\" />\r\n          <h3>{meat.name}</h3>\r\n        </div>)\r\n    });\r\n\r\n    return slides;\r\n  }\r\n\r\n  render() {\r\n    const settings = {\r\n      dots: true,\r\n      infinite: true,\r\n      speed: 500,\r\n      slidesToShow: 3,\r\n      slidesToScroll: 2,\r\n    };\r\n\r\n    return (\r\n      <div className=\"slide-div\">\r\n        <h1 className=\"headerItems\">מחלקת הבשר:</h1>\r\n        <br/>\r\n        <Slider {...settings}>\r\n          {this.createSlides()}\r\n        </Slider>\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport MainNavbar from './components/MainNavbar/MainNavbar'\nimport SimpleSlider from './components/SimpleSlider/SimpleSlider'\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <MainNavbar />\n      <div className=\"content container\">\n        <SimpleSlider />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}